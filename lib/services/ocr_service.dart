import 'dart:convert'; // Importar para usar LineSplitter

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart' show rootBundle;

/// Un servicio de OCR optimizado para extraer c√≥digos de cartas de Yu-Gi-Oh!.
///
/// Esta versi√≥n es extremadamente robusta. Utiliza una limpieza de texto agresiva
/// y una l√≥gica de validaci√≥n modular para funcionar incluso con resultados de OCR
/// de baja calidad y con texto adicional en la imagen.
class OcrService {
  static Set<String>? _cachedAcronymSet;

  /// Patrones de sufijos v√°lidos despu√©s del guion en los c√≥digos de carta.
  static final List<RegExp> _suffixPatterns = [
    RegExp(r'^[A-Z]{2}\d{3}$'), // EN027, FR001, SP004
    RegExp(r'^[A-Z]{3}\d{2,3}$'), // ENG46, ENC17
    RegExp(r'^[A-Z]{1,2}\d{2,3}$'), // S01, E001, etc.
    RegExp(r'^[A-Z]{4}\d{1,2}$'), // ENSE2
    RegExp(r'^\d{3}$'), // Antiguo 001
    RegExp(r'^[A-Z]?\d{3}$'), // E001, S001
    RegExp(r'^JP\d{3}$'), // Japon√©s OCG: JP001
  ];

  /// Correcciones de OCR comunes (solo letras ‚Üí n√∫meros, no al rev√©s).
  static const _correctionMap = {
    'O': '0',
    'I': '1',
    'Z': '2',
    'S': '5',
    'B': '8',
  };

  static Future<Set<String>> _getAcronymSet() async {
    if (_cachedAcronymSet != null) return _cachedAcronymSet!;
    try {
      final fileContent = await rootBundle.loadString(
        'packcodes/card_codes.txt',
      );
      
      final lines = LineSplitter().convert(fileContent);
      final acronyms = <String>{};
      
      for (final line in lines) {
        final trimmed = line.trim();
        if (trimmed.isNotEmpty) {
          final upper = trimmed.toUpperCase();
          if (kDebugMode && upper != trimmed) {
            debugPrint('‚ö†Ô∏è C√≥digo convertido a may√∫sculas: "$trimmed" -> "$upper"');
          }
          acronyms.add(upper);
        }
      }

      _cachedAcronymSet = acronyms;
      debugPrint('‚úÖ Fichero de acr√≥nimos cargado: ${acronyms.length} c√≥digos.');
      
      // Verificar si LDD est√° en la lista
      if (kDebugMode) {
        if (acronyms.contains('LDD')) {
          debugPrint('‚úÖ C√≥digo LDD encontrado en la lista de acr√≥nimos');
        } else {
          debugPrint('‚ùå C√≥digo LDD NO encontrado en la lista de acr√≥nimos');
          // Imprimir algunos c√≥digos para diagn√≥stico
          final sample = acronyms.take(5).toList();
          debugPrint('   Muestra de c√≥digos cargados: $sample...');
        }
      }

      return acronyms;
    } catch (e) {
      debugPrint('‚ùå Error al cargar el fichero de acr√≥nimos: $e');
      if (kDebugMode) {
        debugPrint('   Ruta del archivo: packcodes/card_codes.txt');
      }
      return {};
    }
  }

  static Set<String> _generatePermutations(String token) {
    if (token.length > 10) return {token};
    if (token.isEmpty) return {""};
    final firstChar = token[0];
    final restOfToken = token.substring(1);
    final permsOfRest = _generatePermutations(restOfToken);
    final possibleFirstChars =
        {firstChar, _correctionMap[firstChar]}.whereType<String>();
    final result = <String>{};
    for (final char in possibleFirstChars) {
      for (final perm in permsOfRest) {
        result.add(char + perm);
      }
    }
    return result;
  }


  /// Normaliza sufijos sospechosos del OCR (ej. EN0334 -> EN033).
  static String _normalizeSuffix(String suffix) {
    // Normalizar sufijos que comienzan con S seguido de d√≠gitos
    if (suffix.startsWith('S') && suffix.length > 1) {
      final numberPart = suffix.substring(1);
      if (RegExp(r'^[0-9OIlZSB]+$').hasMatch(numberPart)) {
        // Reemplazar caracteres que podr√≠an ser n√∫meros
        final normalizedNumber = numberPart
            .replaceAll('O', '0')
            .replaceAll('I', '1')
            .replaceAll('l', '1')
            .replaceAll('Z', '2')
            .replaceAll('S', '5')
            .replaceAll('B', '8');
        
        // Asegurarse de que despu√©s de S solo hay n√∫meros
        if (RegExp(r'^\d+$').hasMatch(normalizedNumber)) {
          return 'S$normalizedNumber';
        }
      }
    }
    
    // Normalizar sufijos con demasiados d√≠gitos
    final match = RegExp(r'^([A-Z]*)(\d{4,})$').firstMatch(suffix);
    if (match != null) {
      final base = match.group(1)!;
      final digits = match.group(2)!;
      // Mantener solo los primeros 3 d√≠gitos si hay m√°s de 3
      return '$base${digits.substring(0, 3)}';
    }
    
    return suffix;
  }

  static String? _findValidSuffix(String suffix) {
    // Primero intentamos normalizar el sufijo
    suffix = _normalizeSuffix(suffix);
    
    // Si el sufijo comienza con 'S' seguido de d√≠gitos, asegurarse de que sea un n√∫mero
    if (suffix.startsWith('S') && suffix.length > 1) {
      final numberPart = suffix.substring(1);
      if (RegExp(r'^\d+$').hasMatch(numberPart)) {
        // Si es un n√∫mero v√°lido, devolverlo como est√°
        if (kDebugMode) {
          debugPrint('‚úÖ Sufijo con prefijo S y n√∫mero v√°lido: $suffix');
        }
        return suffix;
      } else {
        // Si no es un n√∫mero, intentar corregir caracteres que podr√≠an ser n√∫meros
        final correctedNumber = numberPart
            .replaceAll('O', '0')
            .replaceAll('I', '1')
            .replaceAll('l', '1')
            .replaceAll('Z', '2')
            .replaceAll('S', '5')
            .replaceAll('B', '8');
            
        if (RegExp(r'^\d+$').hasMatch(correctedNumber)) {
          final correctedSuffix = 'S$correctedNumber';
          if (kDebugMode) {
            debugPrint('‚úÖ Sufijo corregido de $suffix a $correctedSuffix');
          }
          return correctedSuffix;
        }
      }
    }
    
    // Si el sufijo ya coincide con alg√∫n patr√≥n, devolverlo directamente
    for (final pattern in _suffixPatterns) {
      if (pattern.hasMatch(suffix)) {
        if (kDebugMode) {
          debugPrint('‚úÖ Sufijo v√°lido sin permutaciones: $suffix');
        }
        return suffix;
      }
    }
    
    // Si no coincide, generar permutaciones
    final variants = _generatePermutations(suffix);
    if (kDebugMode) {
      debugPrint('üîç Probando variantes de sufijo para: $suffix');
    }

    String? bestMatch;
    int maxDigits = -1;
    int maxLength = -1;

    for (final variant in variants) {
      for (final pattern in _suffixPatterns) {
        if (pattern.hasMatch(variant)) {
          final digitCount = variant.replaceAll(RegExp(r'[^0-9]'), '').length;
          final variantLength = variant.length;
          
          // Preferir la coincidencia con m√°s d√≠gitos, y en caso de empate, la m√°s larga
          if (digitCount > maxDigits || (digitCount == maxDigits && variantLength > maxLength)) {
            maxDigits = digitCount;
            maxLength = variantLength;
            bestMatch = variant;
            
            if (kDebugMode) {
              debugPrint('   ‚úÖ Variante v√°lida: $variant (d√≠gitos: $digitCount, longitud: $variantLength)');
            }
          }
        }
      }
    }

    if (kDebugMode && bestMatch != null) {
      debugPrint('   üèÜ Mejor coincidencia: $bestMatch');
    } else if (kDebugMode) {
      debugPrint('   ‚ùå Ninguna variante v√°lida para: $suffix');
    }

    return bestMatch;
  }

  static String? _validateCandidate(String candidate, Set<String> acronymSet) {
    debugPrint('\nüîç VALIDANDO CANDIDATO: "$candidate"');
    
    // 1. Intentar dividir por guion si existe
    if (candidate.contains('-')) {
      debugPrint('   üîÑ Probando como c√≥digo con guion...');
      final parts = candidate.split('-');
      
      if (parts.length < 2) {
        debugPrint('   ‚ùå No hay suficientes partes despu√©s de dividir por guion');
        return null;
      }
      
      // Unir todas las partes despu√©s del primer guion (por si hay m√∫ltiples guiones)
      final prefixCandidate = parts.first;
      final suffixCandidate = parts.sublist(1).join(''); // Unir sin guiones adicionales
      
      debugPrint('   - Prefijo: "$prefixCandidate"');
      debugPrint('   - Sufijo: "$suffixCandidate"');
      
      // Verificar si el prefijo est√° en la lista de acr√≥nimos
      if (acronymSet.contains(prefixCandidate)) {
        debugPrint('   ‚úÖ Prefijo v√°lido encontrado en la lista: $prefixCandidate');
        
        // Verificar el sufijo
        final validSuffix = _findValidSuffix(suffixCandidate);
        if (validSuffix != null) {
          final result = '$prefixCandidate-$validSuffix';
          debugPrint('   üéØ SUFIJOS V√ÅLIDO: $validSuffix');
          debugPrint('   üéØ C√ìDIGO V√ÅLIDO: $result');
          return result;
        } else {
          debugPrint('   ‚ùå El sufijo "$suffixCandidate" no es v√°lido');
        }
      } else {
        debugPrint('   ‚ùå El prefijo "$prefixCandidate" no est√° en la lista de acr√≥nimos');
        
        // Verificar si el prefijo est√° en may√∫sculas
        if (prefixCandidate != prefixCandidate.toUpperCase()) {
          debugPrint('   ‚ÑπÔ∏è  El prefijo no est√° en may√∫sculas, intentando con may√∫sculas...');
          final upperPrefix = prefixCandidate.toUpperCase();
          if (acronymSet.contains(upperPrefix)) {
            debugPrint('   ‚úÖ Prefijo v√°lido despu√©s de convertir a may√∫sculas: $upperPrefix');
            final validSuffix = _findValidSuffix(suffixCandidate);
            if (validSuffix != null) {
              final result = '$upperPrefix-$validSuffix';
              debugPrint('   üéØ C√ìDIGO V√ÅLIDO (despu√©s de may√∫sculas): $result');
              return result;
            }
          }
        }
      }
      
      // Si llegamos aqu√≠, intentar sin guiones
      final combined = candidate.replaceAll('-', '');
      debugPrint('   üîÑ Probando combinaci√≥n sin guiones: "$combined"');
      
      // Verificar si el candidato completo es un prefijo v√°lido (sin sufijo)
      if (acronymSet.contains(combined)) {
        debugPrint('   ‚ÑπÔ∏è  El c√≥digo completo es un prefijo v√°lido (sin sufijo): $combined');
        // No devolvemos todav√≠a, seguimos buscando un c√≥digo completo
      }
      
      // Intentar dividir en todas las posiciones posibles
      for (int i = 3; i <= combined.length - 2; i++) {
        final prefixCandidate = combined.substring(0, i);
        final suffixCandidate = combined.substring(i);
        
        // Solo mostrar los primeros 3 intentos para no saturar los logs
        if (i <= 5) {
          debugPrint('   - Probando divisi√≥n: "$prefixCandidate" + "$suffixCandidate"');
        } else if (i == 6) {
          debugPrint('   - ... y m√°s combinaciones ...');
        }
        
        if (acronymSet.contains(prefixCandidate)) {
          final validSuffix = _findValidSuffix(suffixCandidate);
          if (validSuffix != null) {
            final result = '$prefixCandidate-$validSuffix';
            debugPrint('   üéØ C√ìDIGO V√ÅLIDO ENCONTRADO: $result');
            return result;
          }
        }
      }
    } 
    // 2. Si no tiene guion, probar todas las divisiones posibles
    else {
      debugPrint('   üîÑ Probando como c√≥digo sin guion...');
      
      // Verificar si el candidato completo es un prefijo v√°lido (sin sufijo)
      if (acronymSet.contains(candidate)) {
        debugPrint('   ‚ÑπÔ∏è  El c√≥digo completo es un prefijo v√°lido (sin sufijo): $candidate');
        // No devolvemos todav√≠a, seguimos buscando un c√≥digo completo
      }
      
      // Intentar dividir en todas las posiciones posibles
      for (int i = 3; i <= candidate.length - 2; i++) {
        final prefixCandidate = candidate.substring(0, i);
        final suffixCandidate = candidate.substring(i);
        
        // Solo mostrar los primeros 3 intentos para no saturar los logs
        if (i <= 5) {
          debugPrint('   - Probando divisi√≥n: "$prefixCandidate" + "$suffixCandidate"');
        } else if (i == 6) {
          debugPrint('   - ... y m√°s combinaciones ...');
        }
        
        if (acronymSet.contains(prefixCandidate)) {
          debugPrint('      ‚úÖ Prefijo v√°lido: $prefixCandidate');
          final validSuffix = _findValidSuffix(suffixCandidate);
          if (validSuffix != null) {
            final result = '$prefixCandidate-$validSuffix';
            debugPrint('      üéØ SUFIJO V√ÅLIDO: $validSuffix');
            debugPrint('      üéØ C√ìDIGO V√ÅLIDO: $result');
            return result;
          } else {
            debugPrint('      ‚ùå El sufijo "$suffixCandidate" no es v√°lido');
          }
        }
      }
    }
    
    debugPrint('   ‚ùå No se encontr√≥ una combinaci√≥n v√°lida para: $candidate');
    return null;
  }

  /// Normaliza el texto antes del procesamiento OCR.
  /// Reemplaza guiones raros, normaliza espacios y corrige errores comunes de OCR.
  static String _preNormalize(String input) {
    var s = input.trim();

    // Normaliza distintos tipos de guion a ASCII '-'
    s = s.replaceAll('‚Äì', '-').replaceAll('‚Äî', '-');

    // Normaliza barras, comas raras, etc. a guion si procede
    s = s.replaceAll('/', '-').replaceAll('\\', '-');

    // Quita m√∫ltiples espacios
    s = s.replaceAll(RegExp(r'\s+'), ' ');

    return s;
  }

  static Future<String?> extractCardCode(String text) async {
    debugPrint('\nüîç INICIO DE AN√ÅLISIS OCR üîç');
    debugPrint('üìù Texto recibido: "$text"');
    
    final acronymSet = await _getAcronymSet();
    if (acronymSet.isEmpty) {
      debugPrint('‚ùå ERROR: No se pudo cargar el conjunto de acr√≥nimos');
      return null;
    }

    // 1. Pre-normalizaci√≥n
    final raw = _preNormalize(text).toUpperCase();
    debugPrint('üîÑ Texto pre-normalizado: "$raw"');
    
    // 2. Limpieza del texto
    final hyperCleanedText = raw.replaceAll(RegExp(r'[^A-Z0-9\- ]'), ' ');
    debugPrint('üßπ Texto limpiado: "$hyperCleanedText"');

    // 3. Tokenizaci√≥n
    final tokens = hyperCleanedText.split(' ').where((s) => s.isNotEmpty).toList();
    debugPrint('üî§ Tokens extra√≠dos: $tokens');

    // 4. Generaci√≥n de candidatos
    final candidates = <String>{};
    
    // a) Tokens individuales
    for (final t in tokens) {
      if (t.length >= 3 && t.length <= 15) { // Reducido el m√≠nimo a 3 para prefijos cortos
        candidates.add(t);
      }
    }
    
    // b) Combinaciones de tokens adyacentes
    for (int i = 0; i < tokens.length - 1; i++) {
      final a = tokens[i];
      final b = tokens[i + 1];
      
      // Comprobar si el primer token es un prefijo conocido
      if (acronymSet.contains(a)) {
        debugPrint('   ‚úÖ Prefijo conocido detectado: $a');
        // Si el primer token es un prefijo conocido, a√±adimos combinaciones con y sin guion
        candidates.add('$a-$b');
        candidates.add('$a$b');
      }
      
      // Comprobar si el segundo token es un sufijo conocido (por si acaso)
      if (_isPotentialSuffix(b)) {
        debugPrint('   ‚úÖ Sufijo potencial detectado: $b');
        candidates.add('$a-$b');
        candidates.add('$a$b');
      }
      
      // A√±adir combinaciones en cualquier caso
      if (a.isNotEmpty && b.isNotEmpty) {
        candidates.add('$a-$b');
        candidates.add('$a$b');
      }
    }

    // Mostrar candidatos generados
    debugPrint('üéØ Candidatos generados (${candidates.length}):');
    for (final c in candidates) {
      debugPrint('   - "$c"');
    }

    // 5. Validaci√≥n de candidatos
    debugPrint('\nüîç Validando candidatos...');
    for (final candidate in candidates) {
      debugPrint('\nüîÑ Procesando candidato: "$candidate"');
      final result = _validateCandidate(candidate, acronymSet);
      if (result != null) {
        debugPrint('‚úÖ‚úÖ‚úÖ C√ìDIGO V√ÅLIDO ENCONTRADO: $result ‚úÖ‚úÖ‚úÖ');
        return result;
      }
    }

    debugPrint('‚ùå‚ùå‚ùå NO SE ENCONTR√ì NING√öN C√ìDIGO V√ÅLIDO');
    return null;
  }
  
  // Funci√≥n auxiliar para detectar si un token podr√≠a ser un sufijo
  static bool _isPotentialSuffix(String token) {
    if (token.isEmpty) return false;
    
    // Un sufijo t√≠pico tiene al menos un n√∫mero o comienza con S seguido de n√∫meros
    if (!RegExp(r'\d').hasMatch(token) && !token.startsWith('S')) {
      return false;
    }
    
    // Si comienza con S, verificar que el resto sean n√∫meros o caracteres que podr√≠an ser n√∫meros
    if (token.startsWith('S') && token.length > 1) {
      final remaining = token.substring(1);
      return RegExp(r'^[0-9OIlZSB]+$').hasMatch(remaining);
    }
    
    // Verificar patrones de sufijos comunes
    return _suffixPatterns.any((pattern) => pattern.hasMatch(token));
  }
}
